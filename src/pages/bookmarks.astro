---
import Base from "src/layouts/Base.layout.astro";
import { fetchBookmarks } from "src/services/bookmarks.service";
import type { IBookmark } from "src/types/api";

const bookmarks = await fetchBookmarks();
const bk: IBookmark[] = [...bookmarks.documents];

const groupedBookmarks = bookmarks.documents.reduce((bookmarks, bookmark) => {
  const date = new Date(bookmark.created_at);
  const key = `${date.getMonth()}-${date.getFullYear()}`;

  if (!bookmarks[key]) {
    bookmarks[key] = [];
  }

  bookmarks[key].push(bookmark);

  return bookmarks;
}, {});

const groupedBookmarksKeys = Object.keys(groupedBookmarks);
---

<Base>
  <Fragment slot="body">
    <div>
      {
        groupedBookmarksKeys.map((key) => {
          const date = new Date();

          const splittedKey = key.split("-");
          date.setFullYear(parseInt(splittedKey[1]));
          date.setMonth(parseInt(splittedKey[0]));
          const formattedDate = new Intl.DateTimeFormat("en-US", {
            month: "long",
            year: "numeric",
          }).format(date);

          return (
            <section>
              <>
                <h6 class="text-[15px] lg:text-lg text-gray-500 mb-3">
                  {formattedDate}
                </h6>
                <div class="grid gap-y-2 -mx-4">
                  {groupedBookmarks[key].map((bookmark) => {
                    return (
                      <a
                        href={`${bookmark.href}`}
                        class="text-[13px] lg:text-lg grid py-1.5 px-4 transition-colors group hover:text-blue-300 hover:bg-blue-300/10 rounded-md"
                      >
                        {bookmark.title}

                        <p class="text-xs mt-1 lg:mt-0 lg:text-base text-gray-500">
                          {bookmark.description}
                        </p>
                      </a>
                    );
                  })}
                </div>
              </>
            </section>
          );
        })
      }
    </div>
  </Fragment>
</Base>
